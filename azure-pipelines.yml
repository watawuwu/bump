trigger:
  branches:
    include:
    - '*'
    exclude:
    - test/*
  tags:
    include:
    - '*'
  paths:
    exclude:
    - README.md
    - install.sh
pr:
  autoCancel: true
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md
    - install.sh

variables:
  RUSTUP_TOOLCHAIN: stable
  NAME: bump

jobs:
- job: build
  strategy:
    matrix:
      musl:
        target: 'x86_64-unknown-linux-musl'
        imageName: 'ubuntu-16.04'
      gnu:
        target: 'x86_64-unknown-linux-gnu'
        imageName: 'ubuntu-16.04'
      mac:
        target: 'x86_64-apple-darwin'
        imageName: 'macos-10.13'
      windows:
        target: 'x86_64-pc-windows-msvc'
        imageName: 'vs2017-win2016'
  pool:
    vmImage: $(imageName)
  steps:
  - script: |
      curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
      rustup update
      rustup show
      sudo apt update && sudo apt install -y musl-dev musl-tools && sudo apt-get clean && sudo rm -rf /var/lib/apt/lists/*
      echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install rust
  - script: |
      curl -sSf -o rustup-init.exe https://win.rustup.rs
      rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN%
      echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
      rustup.exe update
      rustup.exe show
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
    displayName: Windows install rust
  - script: make deps
    displayName: Install build dependencies
  - script: |
      set -eou
      D=$(mktemp -d)
      git clone https://github.com/rust-embedded/cross.git "$D"
      cd "$D"
      curl -O -L "https://gist.githubusercontent.com/nickbabcock/c7bdc8e5974ed9956abf46ffd7dc13ff/raw/e211bc17ea88e505003ad763fac7060b4ac1d8d0/patch"
      git apply patch
      cargo install --path .
      rm -rf "$D"
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
    displayName: Install cross
  - script: make fmt-check test TARGET=$TARGET
    displayName: Test
    condition: ne( variables['Agent.OS'], 'Windows_NT' )
  - script: make fmt-check test TARGET=%TARGET%
    displayName: Test for Windows
    condition: eq( variables['Agent.OS'], 'Windows_NT' )
  - script: |
      make release-build TARGET=$TARGET
      tar czf ${NAME}-${BUILD_BUILDNUMBER}-${TARGET}.tar.gz -C target/${TARGET}/release ${NAME}
    displayName: Build
    condition: and(ne( variables['Agent.OS'], 'Windows_NT' ), succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  - script: |
      make release-build TARGET=%TARGET%
      tar czf %NAME%-%BUILD_BUILDNUMBER%-%TARGET%.tar.gz -C target/%TARGET%/release %NAME%.exe
    displayName: Build for Windows
    condition: and(eq( variables['Agent.OS'], 'Windows_NT' ), succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  - task: CopyFiles@2
    displayName: 'Copy Files to: $(Build.ArtifactStagingDirectory)'
    inputs:
      sourceFolder: '$(System.DefaultWorkingDirectory)'
      Contents: '*.tar.gz'
      targetFolder: '$(Build.ArtifactStagingDirectory)'
  - task: PublishBuildArtifacts@1
    displayName: 'Publish to: $(Build.ArtifactStagingDirectory)'
    inputs:
      pathtoPublish: $(Build.ArtifactStagingDirectory)
      artifactName: BumpBinary
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))

- job: release
  pool:
    vmImage: 'ubuntu-16.04'
  dependsOn: build
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags'))
  steps:
  - task: DownloadBuildArtifacts@0
    displayName: 'Download Build Artifacts'
    inputs:
      artifactName: BumpBinary
      downloadPath: $(System.DefaultWorkingDirectory)
  - task: GithubRelease@0
    displayName: Create GitHub Release
    inputs:
      gitHubConnection: github-watawuwu
      repositoryName: watawuwu/bump
      tag: $(Build.BuildNumber)
      assets: |
        $(System.DefaultWorkingDirectory)/*.tar.gz

